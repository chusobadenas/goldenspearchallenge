apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.jesusbadenas.goldenspearchallenge"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    api project(':data')
    implementation project(':domain')
    testImplementation project(':test')

    implementation rootProject.ext.androidAppCompat
    implementation rootProject.ext.androidConstraintLayout
    implementation rootProject.ext.androidCoreKtx
    implementation rootProject.ext.androidMaterial
    implementation rootProject.ext.androidRecyclerView
    implementation rootProject.ext.archCoreCommon
    implementation rootProject.ext.coroutinesAndroid
    implementation rootProject.ext.coroutinesCore
    implementation rootProject.ext.easyPermissions
    implementation rootProject.ext.fragment
    implementation rootProject.ext.glide
    implementation rootProject.ext.koinAndroid
    implementation rootProject.ext.koinFragment
    implementation rootProject.ext.koinViewModel
    implementation rootProject.ext.kotlin
    implementation rootProject.ext.lifeCycleExtensions
    implementation rootProject.ext.lifeCycleLiveDataKtx
    implementation rootProject.ext.lifeCycleViewModelKtx
    implementation rootProject.ext.paging
    implementation rootProject.ext.timber

    kapt rootProject.ext.dataBindingCompiler
    kapt rootProject.ext.glideCompiler
    kapt rootProject.ext.lifeCycleCompiler

    compileOnly rootProject.ext.jsr250

    testImplementation rootProject.ext.androidXTestCore
    testImplementation rootProject.ext.archCoreTesting
    testImplementation rootProject.ext.coroutinesTest
    testImplementation rootProject.ext.jUnit
    testImplementation rootProject.ext.koinTest
    testImplementation rootProject.ext.mockk
}
